name: CI/CD Pipeline for PHP MVC + Nginx (Docker Image Deploy)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: ⏰ 設定 Docker 圖像 tag 為当前日期和時間
        id: date
        run: echo "TAG=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: 🔐 Docker 登入
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🚀 建立並推送含時間的 Docker 圖像 tag
        run: |
          # 🔄 如果已有 latest tag，先移除，避免 tag 混亂
          docker image rm -f ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest || true
      
          # 🛠 Build 新的 image（含 TAG）
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:${{ env.TAG }} .
      
          # 🏷️ 標記為 latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:${{ env.TAG }} ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest
      
          # ⬆️ 推送到 DockerHub
          docker push ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:${{ env.TAG }}
          docker push ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest
      
          # 🧹 清除未被使用的中間 image，釋放空間
          docker image prune -f


          
      - name: 🗂️ 建立專案與 public 資料夾（如不存在）
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ec2-user/MemberSystemMVC/public
            mkdir -p /home/ec2-user/MemberSystemMVC/nginx
            sudo chown -R ec2-user:www-data /home/ec2-user/MemberSystemMVC
            sudo chmod -R 775 /home/ec2-user/MemberSystemMVC 
      
      - name: 📦 上傳 public 靜態資源資料夾到 EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "public"
          target: "/home/ec2-user/MemberSystemMVC"
            

      - name: 📝 透過 GitHub Secrets 產生 .env 檔案
        run: |
          mkdir -p MemberSystemMVC
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_ALGO=${{ secrets.JWT_ALGO }}
          SUPER_SECRET_KEY=${{ secrets.SUPER_SECRET_KEY }}
          PHP_MAILER=${{ secrets.PHP_MAILER }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          REDIRECT_URI=${{ secrets.REDIRECT_URI }}
          CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          EOF


      - name: 📤 上傳 .env 到 EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: ".env"
          target: "/home/ec2-user/MemberSystemMVC"

          
      - name: 📄 上傳 Nginx 設定檔到 EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "nginx/default.conf"
          target: "/home/ec2-user/MemberSystemMVC/"

      
      
      - name: 📁 備份 .env 檔案到副本資料夾
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ec2-user/MemberSystemMVC_backup.env
            cp /home/ec2-user/MemberSystemMVC/.env /home/ec2-user/MemberSystemMVC_backup.env/.env.bak
            sudo chown -R ec2-user:www-data /home/ec2-user/MemberSystemMVC_backup.env
            sudo chmod -R 775 /home/ec2-user/MemberSystemMVC_backup.env


      - name: 🌐 部署 Docker 圖像至 EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo systemctl start docker
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest

            docker stop my-mvc-php-app nginx_server || true
            docker rm my-mvc-php-app nginx_server || true

            docker network inspect my-net >/dev/null 2>&1 || docker network create my-net

            mkdir -p /home/ec2-user/MemberSystemMVC/public/uploads/avatars
            mkdir -p /home/ec2-user/MemberSystemMVC/logs
            sudo chown -R ec2-user:www-data /home/ec2-user/MemberSystemMVC/public/uploads
            sudo chmod -R 775 /home/ec2-user/MemberSystemMVC/public/uploads
            sudo chown -R ec2-user:www-data /home/ec2-user/MemberSystemMVC/logs
            sudo chmod -R 775 /home/ec2-user/MemberSystemMVC/logs

            docker run -d --name my-mvc-php-app \
              --network my-net \
              -v /home/ec2-user/MemberSystemMVC/.env:/var/www/html/.env \
              ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest




            docker run -d --name nginx_server \
              --network my-net \
              -p 80:80 \
              -p 443:443 \
              -v /home/ec2-user/MemberSystemMVC/public:/var/www/html \
              -v /home/ec2-user/MemberSystemMVC/nginx/default.conf:/etc/nginx/conf.d/default.conf \
              -v /home/ec2-user/certbot/www:/var/www/certbot \
              -v /home/ec2-user/certbot/conf:/etc/letsencrypt \
              nginx


            docker exec nginx_server nginx -t || echo "⚠️ Nginx 配置檢查失敗"

      - name: 📅 設定 SSL 自動續期排程 (crontab)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo '#!/bin/bash
            docker run --rm \
              -v /home/ec2-user/certbot/www:/var/www/certbot \
              -v /home/ec2-user/certbot/conf:/etc/letsencrypt \
              certbot/certbot renew --webroot --webroot-path=/var/www/certbot && docker restart nginx_server' > /home/ec2-user/certbot/renew_cert.sh

            chmod +x /home/ec2-user/certbot/renew_cert.sh

            (crontab -l 2>/dev/null; echo "0 3 * * 0 /home/ec2-user/certbot/renew_cert.sh >> /home/ec2-user/certbot/renew.log 2>&1") | crontab -
