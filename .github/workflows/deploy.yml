name: CI/CD Pipeline for PHP MVC + Nginx (Docker Image Deploy)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v3

      - name: ⏰ 設定 Docker 圖像 tag 為当前日期和時間
        id: date
        run: echo "TAG=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV

      - name: 🔐 Docker 登入
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🚀 建立並推送 Docker 圖像
        run: |
          docker image rm -f ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest || true
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:${{ env.TAG }} .
    
          # 標記 latest 在時間戳版本成功後進行
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:${{ env.TAG }} ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest

          # 先推時間戳備份
          docker push ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:${{ env.TAG }}
    
          # 再推 latest 確保是最新
          docker push ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest

          # 清理本地鏡像
          docker image prune -f


      - name: 📂 建立目錄
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ec2-user/MemberSystemMVC/public
            mkdir -p /home/ec2-user/MemberSystemMVC/nginx
            sudo chown -R ec2-user:www-data /home/ec2-user/MemberSystemMVC
            sudo chmod -R 775 /home/ec2-user/MemberSystemMVC

      - name: 📦 上傳 public
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "public"
          target: "/home/ec2-user/MemberSystemMVC"
      
      - name: 📁 建立 uploads/avatars 並給 www-data 權限
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo "🔧 建立 uploads/avatars 資料夾..."
            mkdir -p /home/ec2-user/MemberSystemMVC/public/uploads/avatars

            echo "🔑 設定擁有者為 www-data..."
            sudo chown -R www-data:www-data /home/ec2-user/MemberSystemMVC/public/uploads

            echo "🔒 設定權限為 755..."
            sudo chmod -R 755 /home/ec2-user/MemberSystemMVC/public/uploads

            echo "✅ uploads/avatars 建立完成並設定完畢。"
  
  

      - name: 🖍️ 用 secrets 產生 .env
        run: |
          mkdir -p MemberSystemMVC
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          JWT_ALGO=${{ secrets.JWT_ALGO }}
          SUPER_SECRET_KEY=${{ secrets.SUPER_SECRET_KEY }}
          PHP_MAILER=${{ secrets.PHP_MAILER }}
          CLIENT_ID=${{ secrets.CLIENT_ID }}
          REDIRECT_URI=${{ secrets.REDIRECT_URI }}
          CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          EOF

      - name: 📄 上傳 .env
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: ".env"
          target: "/home/ec2-user/MemberSystemMVC"

      - name: 📃 上傳 nginx config
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "nginx/default.conf"
          target: "/home/ec2-user/MemberSystemMVC/"

      - name: 📁 備份 .env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ec2-user/MemberSystemMVC_backup.env
            cp /home/ec2-user/MemberSystemMVC/.env /home/ec2-user/MemberSystemMVC_backup.env/.env.bak
            sudo chown -R ec2-user:www-data /home/ec2-user/MemberSystemMVC_backup.env
            sudo chmod -R 775 /home/ec2-user/MemberSystemMVC_backup.env

      - name: 🌐 部署 Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            sudo systemctl start docker
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
 
            echo "📥 重新拉取 image: latest"
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest

            echo "🧹 停止並刪除現有容器（若存在）..."
            docker stop my-mvc-php-app nginx_server || true
            docker rm my-mvc-php-app nginx_server || true

            echo "🌐 建立 Docker 網路（如果尚未建立）"
            docker network inspect my-net >/dev/null 2>&1 || docker network create my-net

            echo "🐘 啟動 PHP 容器..."
            docker run -d --name my-mvc-php-app \
              --network my-net \
              -v /home/ec2-user/MemberSystemMVC:/var/www/html \
              # -v /home/ec2-user/MemberSystemMVC/.env:/var/www/html/.env \
              # -v /home/ec2-user/MemberSystemMVC/public/uploads/avatars:/var/www/html/public/uploads/avatars \
              ${{ secrets.DOCKER_USERNAME }}/my-mvc-php-app:latest

            echo "⏳ 等待 PHP 容器完全啟動..."
            sleep 5
            
      - name: ⚙️ 修正 PHP 上傳暫存資料夾
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            docker exec my-mvc-php-app bash -c "\
            echo -e 'upload_tmp_dir=/tmp\nupload_max_filesize=10M\npost_max_size=20M' > /usr/local/etc/php/conf.d/uploads.ini && \
            kill -USR2 1"


            echo "🌐 啟動 Nginx 容器..."
            docker run -d --name nginx_server \
              --network my-net \
              -p 80:80 -p 443:443 \
              -v /home/ec2-user/MemberSystemMVC/public:/var/www/html \
              -v /home/ec2-user/MemberSystemMVC/public/uploads/avatars:/var/www/html/public/uploads/avatars \
              -v /home/ec2-user/MemberSystemMVC/nginx/default.conf:/etc/nginx/conf.d/default.conf \
              -v /home/ec2-user/certbot/www:/var/www/certbot \
              -v /home/ec2-user/certbot/conf:/etc/letsencrypt \
              nginx
              

            echo "🔍 驗證 Nginx 設定檔..."
            docker exec nginx_server nginx -t || echo "⚠️ Nginx 配置錯誤"
     

     

      - name: 📅 設定 SSL 繼續 cron
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo '#!/bin/bash
            docker run --rm \
              -v /home/ec2-user/certbot/www:/var/www/certbot \
              -v /home/ec2-user/certbot/conf:/etc/letsencrypt \
              certbot/certbot renew --webroot --webroot-path=/var/www/certbot && docker restart nginx_server' > /home/ec2-user/certbot/renew_cert.sh

            chmod +x /home/ec2-user/certbot/renew_cert.sh

            (crontab -l 2>/dev/null; echo "0 3 * * 0 /home/ec2-user/certbot/renew_cert.sh >> /home/ec2-user/certbot/renew.log 2>&1") | crontab -


      - name: 🧹 清理 EC2 上的無用 Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo "🧼 刪除 EC2 上所有 dangling image（沒有 tag 的 image）..."
            docker image prune -f
